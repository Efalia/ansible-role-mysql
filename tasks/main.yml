---
# Variable configuration.
- include_tasks: variables.yml

# Setup/install tasks.
- name: Check if MySQL is already installed.
  stat: path="{{ mysql_config_file }}"
  register: mysql_installed

- name: Update apt cache if MySQL is not yet installed.
  apt: update_cache=yes
  when: not mysql_installed.stat.exists

- name: Determine required MySQL Python libraries.
  set_fact:
    mysql_python_package_debian: "{% if 'python3' in ansible_python_interpreter|default('') %}python3-mysqldb{% else %}python-mysqldb{% endif %}"
  when: mysql_python_package_debian is not defined

- name: Ensure MySQL Python libraries are installed.
  apt:
    name: "{{ mysql_python_package_debian }}"
    state: present

- name: Ensure MySQL packages are installed.
  apt:
    name: "{{ mysql_packages }}"
    state: present
  register: deb_mysql_install_packages

# Because Ubuntu starts MySQL as part of the install process, we need to stop
# mysql and remove the logfiles in case the user set a custom log file size.
- name: Ensure MySQL is stopped after initial install.
  service: "name={{ mysql_daemon }} state=stopped"
  when: not mysql_installed.stat.exists

- name: Delete innodb log files created by apt package after initial install.
  file: path={{ mysql_datadir }}/{{ item }} state=absent
  with_items:
    - ib_logfile0
    - ib_logfile1
  when: not mysql_installed.stat.exists

- name: Check if MySQL packages were installed.
  set_fact:
    mysql_install_packages: "{{ (rh_mysql_install_packages is defined and rh_mysql_install_packages.changed)
      or (deb_mysql_install_packages is defined and deb_mysql_install_packages.changed)
      or (arch_mysql_install_packages is defined and arch_mysql_install_packages.changed) }}"

# Configure MySQL.
- include_tasks: configure.yml
- include_tasks: secure-installation.yml
- include_tasks: databases.yml
- include_tasks: users.yml
- include_tasks: replication.yml
